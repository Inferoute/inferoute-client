name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # This is required for creating releases and uploading assets

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Build binaries
        run: |
          # Create build directory
          mkdir -p build
          
          # Get version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +'%Y-%m-%d_%H:%M:%S')
          
          # Build flags for version information
          VERSION_FLAGS="-X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE"
          
          # Build for Linux amd64
          GOOS=linux GOARCH=amd64 go build -ldflags "$VERSION_FLAGS" -o build/inferoute-client-linux-amd64 ./cmd
          
          # Build for Linux arm64
          GOOS=linux GOARCH=arm64 go build -ldflags "$VERSION_FLAGS" -o build/inferoute-client-linux-arm64 ./cmd
          
          # Build for macOS amd64 (Intel)
          GOOS=darwin GOARCH=amd64 go build -ldflags "$VERSION_FLAGS" -o build/inferoute-client-darwin-amd64 ./cmd
          
          # Build for macOS arm64 (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags "$VERSION_FLAGS" -o build/inferoute-client-darwin-arm64 ./cmd
          
          # Build for Windows amd64 (64-bit)
          GOOS=windows GOARCH=amd64 go build -ldflags "$VERSION_FLAGS" -o build/inferoute-client-windows-amd64.exe ./cmd
          
          # Build for Windows 386 (32-bit)
          GOOS=windows GOARCH=386 go build -ldflags "$VERSION_FLAGS" -o build/inferoute-client-windows-386.exe ./cmd
          
          # Create zip archives
          cd build
          zip -r inferoute-client-linux-amd64.zip inferoute-client-linux-amd64
          zip -r inferoute-client-linux-arm64.zip inferoute-client-linux-arm64
          zip -r inferoute-client-darwin-amd64.zip inferoute-client-darwin-amd64
          zip -r inferoute-client-darwin-arm64.zip inferoute-client-darwin-arm64
          zip -r inferoute-client-windows-amd64.zip inferoute-client-windows-amd64.exe
          zip -r inferoute-client-windows-386.zip inferoute-client-windows-386.exe
          cd ..
      
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/inferoute-client-linux-amd64.zip
            build/inferoute-client-linux-arm64.zip
            build/inferoute-client-darwin-amd64.zip
            build/inferoute-client-darwin-arm64.zip
            build/inferoute-client-windows-amd64.zip
            build/inferoute-client-windows-386.zip
          draft: false
          prerelease: false
          generate_release_notes: true
          body_path: ${{ github.workspace }}/CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
      
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract version from tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: inferoute/inferoute-client
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            latest
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            RELEASE_VERSION=${{ env.RELEASE_VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
